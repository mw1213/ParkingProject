--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI.Errors;
with PolyORB_HI_Generated.Deployment;
with Ada.Real_Time;
with System;
with PolyORB_HI.Aperiodic_Task;
pragma Elaborate_All (PolyORB_HI.Aperiodic_Task);
with PolyORB_HI_Generated.Types;

package PolyORB_HI_Generated.Activity is

  --  BEGIN: Entities used by all instances of component 
  --  inductive_loop_in_thread.impl

  type parking_system_inductive_loop_in_thread_impl_Port_Type is
   (car_on_loop,
    recognize_plates_in);

  type parking_system_inductive_loop_in_thread_impl_Interface 
   (Port : parking_system_inductive_loop_in_thread_impl_Port_Type := parking_system_inductive_loop_in_thread_impl_Port_Type'First)
  is
    record
      case Port is
        when car_on_loop =>
          null;
        when recognize_plates_in =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_inductive_loop_in_thread_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return parking_system_inductive_loop_in_thread_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_inductive_loop_in_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_inductive_loop_in_thread_impl_Port_Type);

  --  END: Entities used by all instances of component 
  --  inductive_loop_in_thread.impl

  --  Aperiodic task : inductive_loop_in_thread

  function parking_system_inductive_loop_in_thread_Job
   (Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  package parking_system_inductive_loop_in_thread_Task is
   new PolyORB_HI.Aperiodic_Task
     (Port_Type => parking_system_inductive_loop_in_thread_impl_Port_Type,
      Entity => PolyORB_HI_Generated.Deployment.main_inductive_loop_in_thread_K,
      Task_Priority => System.Default_Priority,
      Task_Stack_Size => 100000,
      Job => parking_system_inductive_loop_in_thread_Job,
      Wait_For_Incoming_Events => Wait_For_Incoming_Events);

  --  BEGIN: Entities used by all instances of component 
  --  plates_data_thread.impl

  type parking_system_plates_data_thread_impl_Port_Type is
   (plates_data_in,
    plates_data_in_event,
    open_gate_in);

  type parking_system_plates_data_thread_impl_Interface 
   (Port : parking_system_plates_data_thread_impl_Port_Type := parking_system_plates_data_thread_impl_Port_Type'First)
  is
    record
      case Port is
        when plates_data_in =>
          plates_data_in_DATA : PolyORB_HI_Generated.Types.Integer;
        when plates_data_in_event =>
          null;
        when open_gate_in =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_plates_data_thread_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
   return parking_system_plates_data_thread_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_plates_data_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_plates_data_thread_impl_Port_Type);

  --  END: Entities used by all instances of component 
  --  plates_data_thread.impl

  --  Aperiodic task : plates_data_thread

  function parking_system_plates_data_thread_Job
   (Port : parking_system_plates_data_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  package parking_system_plates_data_thread_Task is
   new PolyORB_HI.Aperiodic_Task
     (Port_Type => parking_system_plates_data_thread_impl_Port_Type,
      Entity => PolyORB_HI_Generated.Deployment.main_plates_data_thread_K,
      Task_Priority => System.Default_Priority,
      Task_Stack_Size => 100000,
      Job => parking_system_plates_data_thread_Job,
      Wait_For_Incoming_Events => Wait_For_Incoming_Events);

  --  BEGIN: Entities used by all instances of component 
  --  car_passed_entry_thread.impl

  type parking_system_car_passed_entry_thread_impl_Port_Type is
   (car_on_loop,
    close_gate);

  type parking_system_car_passed_entry_thread_impl_Interface 
   (Port : parking_system_car_passed_entry_thread_impl_Port_Type := parking_system_car_passed_entry_thread_impl_Port_Type'First)
  is
    record
      case Port is
        when car_on_loop =>
          null;
        when close_gate =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_passed_entry_thread_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return parking_system_car_passed_entry_thread_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_passed_entry_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_car_passed_entry_thread_impl_Port_Type);

  --  END: Entities used by all instances of component 
  --  car_passed_entry_thread.impl

  --  Aperiodic task : car_passed_entry_thread

  function parking_system_car_passed_entry_thread_Job
   (Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  package parking_system_car_passed_entry_thread_Task is
   new PolyORB_HI.Aperiodic_Task
     (Port_Type => parking_system_car_passed_entry_thread_impl_Port_Type,
      Entity => PolyORB_HI_Generated.Deployment.main_car_passed_entry_thread_K,
      Task_Priority => System.Default_Priority,
      Task_Stack_Size => 100000,
      Job => parking_system_car_passed_entry_thread_Job,
      Wait_For_Incoming_Events => Wait_For_Incoming_Events);

  --  BEGIN: Entities used by all instances of component 
  --  car_parked_thread.impl

  type parking_system_car_parked_thread_impl_Port_Type is
   (slots_number,
    car_parked);

  type parking_system_car_parked_thread_impl_Interface 
   (Port : parking_system_car_parked_thread_impl_Port_Type := parking_system_car_parked_thread_impl_Port_Type'First)
  is
    record
      case Port is
        when slots_number =>
          slots_number_DATA : PolyORB_HI_Generated.Types.Integer;
        when car_parked =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_parked_thread_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
   return parking_system_car_parked_thread_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_parked_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_car_parked_thread_impl_Port_Type);

  --  END: Entities used by all instances of component car_parked_thread.impl

  --  Aperiodic task : car_parked_thread

  function parking_system_car_parked_thread_Job
   (Port : parking_system_car_parked_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  package parking_system_car_parked_thread_Task is
   new PolyORB_HI.Aperiodic_Task
     (Port_Type => parking_system_car_parked_thread_impl_Port_Type,
      Entity => PolyORB_HI_Generated.Deployment.main_car_parked_thread_K,
      Task_Priority => System.Default_Priority,
      Task_Stack_Size => 100000,
      Job => parking_system_car_parked_thread_Job,
      Wait_For_Incoming_Events => Wait_For_Incoming_Events);

  --  BEGIN: Entities used by all instances of component 
  --  car_moved_thread.impl

  type parking_system_car_moved_thread_impl_Port_Type is
   (slots_number,
    car_moved);

  type parking_system_car_moved_thread_impl_Interface 
   (Port : parking_system_car_moved_thread_impl_Port_Type := parking_system_car_moved_thread_impl_Port_Type'First)
  is
    record
      case Port is
        when slots_number =>
          slots_number_DATA : PolyORB_HI_Generated.Types.Integer;
        when car_moved =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_moved_thread_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
   return parking_system_car_moved_thread_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_moved_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_car_moved_thread_impl_Port_Type);

  --  END: Entities used by all instances of component car_moved_thread.impl

  --  Aperiodic task : car_moved_thread

  function parking_system_car_moved_thread_Job
   (Port : parking_system_car_moved_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  package parking_system_car_moved_thread_Task is
   new PolyORB_HI.Aperiodic_Task
     (Port_Type => parking_system_car_moved_thread_impl_Port_Type,
      Entity => PolyORB_HI_Generated.Deployment.main_car_moved_thread_K,
      Task_Priority => System.Default_Priority,
      Task_Stack_Size => 100000,
      Job => parking_system_car_moved_thread_Job,
      Wait_For_Incoming_Events => Wait_For_Incoming_Events);

  --  BEGIN: Entities used by all instances of component 
  --  inductive_loop_out_thread.impl

  type parking_system_inductive_loop_out_thread_impl_Port_Type is
   (car_on_loop,
    recognize_plates_out);

  type parking_system_inductive_loop_out_thread_impl_Interface 
   (Port : parking_system_inductive_loop_out_thread_impl_Port_Type := parking_system_inductive_loop_out_thread_impl_Port_Type'First)
  is
    record
      case Port is
        when car_on_loop =>
          null;
        when recognize_plates_out =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_inductive_loop_out_thread_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return parking_system_inductive_loop_out_thread_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_inductive_loop_out_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_inductive_loop_out_thread_impl_Port_Type);

  --  END: Entities used by all instances of component 
  --  inductive_loop_out_thread.impl

  --  Aperiodic task : inductive_loop_out_thread

  function parking_system_inductive_loop_out_thread_Job
   (Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  package parking_system_inductive_loop_out_thread_Task is
   new PolyORB_HI.Aperiodic_Task
     (Port_Type => parking_system_inductive_loop_out_thread_impl_Port_Type,
      Entity => PolyORB_HI_Generated.Deployment.main_inductive_loop_out_thread_K,
      Task_Priority => System.Default_Priority,
      Task_Stack_Size => 100000,
      Job => parking_system_inductive_loop_out_thread_Job,
      Wait_For_Incoming_Events => Wait_For_Incoming_Events);

  --  BEGIN: Entities used by all instances of component calculate_price.impl

  type parking_system_calculate_price_impl_Port_Type is
   (plate_number_event,
    plate_number,
    calculated_price);

  type parking_system_calculate_price_impl_Interface 
   (Port : parking_system_calculate_price_impl_Port_Type := parking_system_calculate_price_impl_Port_Type'First)
  is
    record
      case Port is
        when plate_number_event =>
          null;
        when plate_number =>
          plate_number_DATA : PolyORB_HI_Generated.Types.Integer;
        when calculated_price =>
          calculated_price_DATA : PolyORB_HI_Generated.Types.Integer;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_calculate_price_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
   return parking_system_calculate_price_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_calculate_price_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_calculate_price_impl_Port_Type);

  --  END: Entities used by all instances of component calculate_price.impl

  --  Aperiodic task : calculate_price

  function parking_system_calculate_price_Job
   (Port : parking_system_calculate_price_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  package parking_system_calculate_price_Task is
   new PolyORB_HI.Aperiodic_Task
     (Port_Type => parking_system_calculate_price_impl_Port_Type,
      Entity => PolyORB_HI_Generated.Deployment.main_calculate_price_K,
      Task_Priority => System.Default_Priority,
      Task_Stack_Size => 100000,
      Job => parking_system_calculate_price_Job,
      Wait_For_Incoming_Events => Wait_For_Incoming_Events);

  --  BEGIN: Entities used by all instances of component 
  --  open_gate_out_thread.impl

  type parking_system_open_gate_out_thread_impl_Port_Type is
   (parking_paid,
    open_gate_out);

  type parking_system_open_gate_out_thread_impl_Interface 
   (Port : parking_system_open_gate_out_thread_impl_Port_Type := parking_system_open_gate_out_thread_impl_Port_Type'First)
  is
    record
      case Port is
        when parking_paid =>
          null;
        when open_gate_out =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_open_gate_out_thread_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return parking_system_open_gate_out_thread_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_open_gate_out_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_open_gate_out_thread_impl_Port_Type);

  --  END: Entities used by all instances of component 
  --  open_gate_out_thread.impl

  --  Aperiodic task : open_gate_out_thread

  function parking_system_open_gate_out_thread_Job
   (Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  package parking_system_open_gate_out_thread_Task is
   new PolyORB_HI.Aperiodic_Task
     (Port_Type => parking_system_open_gate_out_thread_impl_Port_Type,
      Entity => PolyORB_HI_Generated.Deployment.main_open_gate_out_thread_K,
      Task_Priority => System.Default_Priority,
      Task_Stack_Size => 100000,
      Job => parking_system_open_gate_out_thread_Job,
      Wait_For_Incoming_Events => Wait_For_Incoming_Events);

  --  BEGIN: Entities used by all instances of component 
  --  car_passed_exit_thread.impl

  type parking_system_car_passed_exit_thread_impl_Port_Type is
   (car_on_loop,
    close_gate);

  type parking_system_car_passed_exit_thread_impl_Interface 
   (Port : parking_system_car_passed_exit_thread_impl_Port_Type := parking_system_car_passed_exit_thread_impl_Port_Type'First)
  is
    record
      case Port is
        when car_on_loop =>
          null;
        when close_gate =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_passed_exit_thread_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return parking_system_car_passed_exit_thread_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_passed_exit_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_car_passed_exit_thread_impl_Port_Type);

  --  END: Entities used by all instances of component 
  --  car_passed_exit_thread.impl

  --  Aperiodic task : car_passed_exit_thread

  function parking_system_car_passed_exit_thread_Job
   (Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  package parking_system_car_passed_exit_thread_Task is
   new PolyORB_HI.Aperiodic_Task
     (Port_Type => parking_system_car_passed_exit_thread_impl_Port_Type,
      Entity => PolyORB_HI_Generated.Deployment.main_car_passed_exit_thread_K,
      Task_Priority => System.Default_Priority,
      Task_Stack_Size => 100000,
      Job => parking_system_car_passed_exit_thread_Job,
      Wait_For_Incoming_Events => Wait_For_Incoming_Events);

end PolyORB_HI_Generated.Activity;
