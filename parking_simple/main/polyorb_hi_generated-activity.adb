--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI.Port_Kinds;
with System;
with PolyORB_HI_Generated.Marshallers;
with PolyORB_HI_Generated.Transport;
with PolyORB_HI.Thread_Interrogators;
pragma Elaborate_All (PolyORB_HI.Thread_Interrogators);
with PolyORB_HI_Generated.Subprograms;

package body PolyORB_HI_Generated.Activity is

  --  BEGIN: Data types used by all instances of component 
  --  inductive_loop_in_thread.impl

  type parking_system_inductive_loop_in_thread_impl_Integer_Array is
   array (parking_system_inductive_loop_in_thread_impl_Port_Type)
     of Standard.Integer;

  type parking_system_inductive_loop_in_thread_impl_Port_Kind_Array is
   array (parking_system_inductive_loop_in_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_1_Max_Port_Image_Size is
   Integer range 1 .. PolyORB_HI_Generated.Deployment.Max_Port_Image_Size;

  subtype UT_Activity_Main_parking_system_inductive_loop_in_thread_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_system_inductive_loop_in_thread_impl_Port_Image_Array is
   array (parking_system_inductive_loop_in_thread_impl_Port_Type)
     of UT_Activity_Main_parking_system_inductive_loop_in_thread_impl_Port_Image_Array_Component;

  type parking_system_inductive_loop_in_thread_impl_Address_Array is
   array (parking_system_inductive_loop_in_thread_impl_Port_Type)
     of System.Address;

  type parking_system_inductive_loop_in_thread_impl_Overflow_Protocol_Array is
   array (parking_system_inductive_loop_in_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component 
  --  inductive_loop_in_thread.impl

  parking_system_inductive_loop_in_thread_Port_Kinds : constant parking_system_inductive_loop_in_thread_impl_Port_Kind_Array :=
   (car_on_loop =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    recognize_plates_in =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  parking_system_inductive_loop_in_thread_Port_Images : constant parking_system_inductive_loop_in_thread_impl_Port_Image_Array :=
   (car_on_loop =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_inductive_loop_in_thread_car_on_loop_K),
    recognize_plates_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_inductive_loop_in_thread_recognize_plates_in_K));

  parking_system_inductive_loop_in_thread_FIFO_Sizes : constant parking_system_inductive_loop_in_thread_impl_Integer_Array :=
   (car_on_loop =>
     16,
    recognize_plates_in =>
     -1);

  parking_system_inductive_loop_in_thread_Offsets : constant parking_system_inductive_loop_in_thread_impl_Integer_Array :=
   (car_on_loop =>
     1,
    recognize_plates_in =>
     0);

  parking_system_inductive_loop_in_thread_Overflow_Protocols : constant parking_system_inductive_loop_in_thread_impl_Overflow_Protocol_Array :=
   (car_on_loop =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    recognize_plates_in =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_system_inductive_loop_in_thread_Urgencies : constant parking_system_inductive_loop_in_thread_impl_Integer_Array :=
   (car_on_loop =>
     0,
    recognize_plates_in =>
     0);

  parking_system_inductive_loop_in_thread_Total_FIFO_Size : constant Standard.Integer :=
   16;

  parking_system_inductive_loop_in_thread_N_Destinations : constant parking_system_inductive_loop_in_thread_impl_Integer_Array :=
   (car_on_loop =>
     0,
    recognize_plates_in =>
     0);

  inductive_loop_in_thread_Destinations : constant parking_system_inductive_loop_in_thread_impl_Address_Array :=
   (car_on_loop =>
     System.null_Address,
    recognize_plates_in =>
     System.null_Address);

  package parking_system_inductive_loop_in_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_system_inductive_loop_in_thread_impl_Port_Type,
      Integer_Array => parking_system_inductive_loop_in_thread_impl_Integer_Array,
      Port_Kind_Array => parking_system_inductive_loop_in_thread_impl_Port_Kind_Array,
      Port_Image_Array => parking_system_inductive_loop_in_thread_impl_Port_Image_Array,
      Address_Array => parking_system_inductive_loop_in_thread_impl_Address_Array,
      Overflow_Protocol_Array => parking_system_inductive_loop_in_thread_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_system_inductive_loop_in_thread_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_inductive_loop_in_thread_K,
      Thread_Port_Kinds => parking_system_inductive_loop_in_thread_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_system_inductive_loop_in_thread_Port_Images,
      Thread_Fifo_Sizes => parking_system_inductive_loop_in_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_system_inductive_loop_in_thread_Offsets,
      Thread_Overflow_Protocols => parking_system_inductive_loop_in_thread_Overflow_Protocols,
      Urgencies => parking_system_inductive_loop_in_thread_Urgencies,
      Global_Data_Queue_Size => parking_system_inductive_loop_in_thread_Total_FIFO_Size,
      N_Destinations => parking_system_inductive_loop_in_thread_N_Destinations,
      Destinations => inductive_loop_in_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_system_inductive_loop_in_thread_Task.Next_Deadline);

  --  Aperiodic task : inductive_loop_in_thread

  -------------------------------------------------
  -- parking_system_inductive_loop_in_thread_Job -- 
  -------------------------------------------------

  function parking_system_inductive_loop_in_thread_Job
   (Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    startPlatesRecognition_Status : PolyORB_HI_Generated.Subprograms.parking_system_startPlatesRecognitionIn_Status;
    pragma Unreferenced
     (Port);
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    parking_system_inductive_loop_in_thread_Interrogators.Next_Value
     (parking_system_inductive_loop_in_thread_impl_Port_Type'
       (car_on_loop));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_system_startPlatesRecognitionIn
     (Status => startPlatesRecognition_Status);
    if (PolyORB_HI_Generated.Subprograms.Get_Count
     (startPlatesRecognition_Status,
      PolyORB_HI_Generated.Subprograms.parking_system_startPlatesRecognitionIn_Port_Type'
       (PolyORB_HI_Generated.Subprograms.recognize_plates))
      >= 1)
    then
      PolyORB_HI_Generated.Activity.Put_Value
       (PolyORB_HI_Generated.Deployment.main_inductive_loop_in_thread_K,
        PolyORB_HI_Generated.Activity.parking_system_inductive_loop_in_thread_impl_Interface'
         (Port => recognize_plates_in));
    end if;
    --  Send the call sequence OUT port values
    Error_Ü :=
     parking_system_inductive_loop_in_thread_Interrogators.Send_Output
       (recognize_plates_in);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end parking_system_inductive_loop_in_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  plates_data_thread.impl

  type parking_system_plates_data_thread_impl_Integer_Array is
   array (parking_system_plates_data_thread_impl_Port_Type)
     of Standard.Integer;

  type parking_system_plates_data_thread_impl_Port_Kind_Array is
   array (parking_system_plates_data_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_parking_system_plates_data_thread_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_system_plates_data_thread_impl_Port_Image_Array is
   array (parking_system_plates_data_thread_impl_Port_Type)
     of UT_Activity_Main_parking_system_plates_data_thread_impl_Port_Image_Array_Component;

  type parking_system_plates_data_thread_impl_Address_Array is
   array (parking_system_plates_data_thread_impl_Port_Type)
     of System.Address;

  type parking_system_plates_data_thread_impl_Overflow_Protocol_Array is
   array (parking_system_plates_data_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component 
  --  plates_data_thread.impl

  parking_system_plates_data_thread_Port_Kinds : constant parking_system_plates_data_thread_impl_Port_Kind_Array :=
   (plates_data_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    plates_data_in_event =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    open_gate_in =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  parking_system_plates_data_thread_Port_Images : constant parking_system_plates_data_thread_impl_Port_Image_Array :=
   (plates_data_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_plates_data_thread_plates_data_in_K),
    plates_data_in_event =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_plates_data_thread_plates_data_in_event_K),
    open_gate_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_plates_data_thread_open_gate_in_K));

  parking_system_plates_data_thread_FIFO_Sizes : constant parking_system_plates_data_thread_impl_Integer_Array :=
   (plates_data_in =>
     1,
    plates_data_in_event =>
     16,
    open_gate_in =>
     -1);

  parking_system_plates_data_thread_Offsets : constant parking_system_plates_data_thread_impl_Integer_Array :=
   (plates_data_in =>
     1,
    plates_data_in_event =>
     2,
    open_gate_in =>
     0);

  parking_system_plates_data_thread_Overflow_Protocols : constant parking_system_plates_data_thread_impl_Overflow_Protocol_Array :=
   (plates_data_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    plates_data_in_event =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    open_gate_in =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_system_plates_data_thread_Urgencies : constant parking_system_plates_data_thread_impl_Integer_Array :=
   (plates_data_in =>
     0,
    plates_data_in_event =>
     0,
    open_gate_in =>
     0);

  parking_system_plates_data_thread_Total_FIFO_Size : constant Standard.Integer :=
   17;

  parking_system_plates_data_thread_N_Destinations : constant parking_system_plates_data_thread_impl_Integer_Array :=
   (plates_data_in =>
     0,
    plates_data_in_event =>
     0,
    open_gate_in =>
     0);

  plates_data_thread_Destinations : constant parking_system_plates_data_thread_impl_Address_Array :=
   (plates_data_in =>
     System.null_Address,
    plates_data_in_event =>
     System.null_Address,
    open_gate_in =>
     System.null_Address);

  package parking_system_plates_data_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_system_plates_data_thread_impl_Port_Type,
      Integer_Array => parking_system_plates_data_thread_impl_Integer_Array,
      Port_Kind_Array => parking_system_plates_data_thread_impl_Port_Kind_Array,
      Port_Image_Array => parking_system_plates_data_thread_impl_Port_Image_Array,
      Address_Array => parking_system_plates_data_thread_impl_Address_Array,
      Overflow_Protocol_Array => parking_system_plates_data_thread_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_system_plates_data_thread_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_plates_data_thread_K,
      Thread_Port_Kinds => parking_system_plates_data_thread_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_system_plates_data_thread_Port_Images,
      Thread_Fifo_Sizes => parking_system_plates_data_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_system_plates_data_thread_Offsets,
      Thread_Overflow_Protocols => parking_system_plates_data_thread_Overflow_Protocols,
      Urgencies => parking_system_plates_data_thread_Urgencies,
      Global_Data_Queue_Size => parking_system_plates_data_thread_Total_FIFO_Size,
      N_Destinations => parking_system_plates_data_thread_N_Destinations,
      Destinations => plates_data_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_system_plates_data_thread_Task.Next_Deadline);

  --  Aperiodic task : plates_data_thread

  -------------------------------------------
  -- parking_system_plates_data_thread_Job -- 
  -------------------------------------------

  function parking_system_plates_data_thread_Job
   (Port : parking_system_plates_data_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    plates_data_in_V : PolyORB_HI_Generated.Types.Integer;
    getPlateNumberFromVideo_Status : PolyORB_HI_Generated.Subprograms.parking_system_getPlateNumberFromVideo_Status;
    pragma Unreferenced
     (Port);
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (parking_system_plates_data_thread_Interrogators.Get_Count
     (plates_data_in)
      /= -1)
    then
      plates_data_in_V :=
       parking_system_plates_data_thread_Interrogators.Get_Value
         (plates_data_in).plates_data_in_DATA;
    else
      plates_data_in_V :=
       PolyORB_HI_Generated.Types.Integer_Default_Value;
    end if;
    --  Dequeue the IN port values
    parking_system_plates_data_thread_Interrogators.Next_Value
     (parking_system_plates_data_thread_impl_Port_Type'
       (plates_data_in_event));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_system_getPlateNumberFromVideo
     (plates_data_in => plates_data_in_V,
      Status => getPlateNumberFromVideo_Status);
    if (PolyORB_HI_Generated.Subprograms.Get_Count
     (getPlateNumberFromVideo_Status,
      PolyORB_HI_Generated.Subprograms.parking_system_getPlateNumberFromVideo_Port_Type'
       (PolyORB_HI_Generated.Subprograms.open_gate_in))
      >= 1)
    then
      PolyORB_HI_Generated.Activity.Put_Value
       (PolyORB_HI_Generated.Deployment.main_plates_data_thread_K,
        PolyORB_HI_Generated.Activity.parking_system_plates_data_thread_impl_Interface'
         (Port => open_gate_in));
    end if;
    --  Send the call sequence OUT port values
    Error_Ü :=
     parking_system_plates_data_thread_Interrogators.Send_Output
       (open_gate_in);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end parking_system_plates_data_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  car_passed_entry_thread.impl

  type parking_system_car_passed_entry_thread_impl_Integer_Array is
   array (parking_system_car_passed_entry_thread_impl_Port_Type)
     of Standard.Integer;

  type parking_system_car_passed_entry_thread_impl_Port_Kind_Array is
   array (parking_system_car_passed_entry_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_parking_system_car_passed_entry_thread_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_system_car_passed_entry_thread_impl_Port_Image_Array is
   array (parking_system_car_passed_entry_thread_impl_Port_Type)
     of UT_Activity_Main_parking_system_car_passed_entry_thread_impl_Port_Image_Array_Component;

  type parking_system_car_passed_entry_thread_impl_Address_Array is
   array (parking_system_car_passed_entry_thread_impl_Port_Type)
     of System.Address;

  type parking_system_car_passed_entry_thread_impl_Overflow_Protocol_Array is
   array (parking_system_car_passed_entry_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component 
  --  car_passed_entry_thread.impl

  parking_system_car_passed_entry_thread_Port_Kinds : constant parking_system_car_passed_entry_thread_impl_Port_Kind_Array :=
   (car_on_loop =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    close_gate =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  parking_system_car_passed_entry_thread_Port_Images : constant parking_system_car_passed_entry_thread_impl_Port_Image_Array :=
   (car_on_loop =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_car_passed_entry_thread_car_on_loop_K),
    close_gate =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_car_passed_entry_thread_close_gate_K));

  parking_system_car_passed_entry_thread_FIFO_Sizes : constant parking_system_car_passed_entry_thread_impl_Integer_Array :=
   (car_on_loop =>
     16,
    close_gate =>
     -1);

  parking_system_car_passed_entry_thread_Offsets : constant parking_system_car_passed_entry_thread_impl_Integer_Array :=
   (car_on_loop =>
     1,
    close_gate =>
     0);

  parking_system_car_passed_entry_thread_Overflow_Protocols : constant parking_system_car_passed_entry_thread_impl_Overflow_Protocol_Array :=
   (car_on_loop =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    close_gate =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_system_car_passed_entry_thread_Urgencies : constant parking_system_car_passed_entry_thread_impl_Integer_Array :=
   (car_on_loop =>
     0,
    close_gate =>
     0);

  parking_system_car_passed_entry_thread_Total_FIFO_Size : constant Standard.Integer :=
   16;

  parking_system_car_passed_entry_thread_N_Destinations : constant parking_system_car_passed_entry_thread_impl_Integer_Array :=
   (car_on_loop =>
     0,
    close_gate =>
     0);

  car_passed_entry_thread_Destinations : constant parking_system_car_passed_entry_thread_impl_Address_Array :=
   (car_on_loop =>
     System.null_Address,
    close_gate =>
     System.null_Address);

  package parking_system_car_passed_entry_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_system_car_passed_entry_thread_impl_Port_Type,
      Integer_Array => parking_system_car_passed_entry_thread_impl_Integer_Array,
      Port_Kind_Array => parking_system_car_passed_entry_thread_impl_Port_Kind_Array,
      Port_Image_Array => parking_system_car_passed_entry_thread_impl_Port_Image_Array,
      Address_Array => parking_system_car_passed_entry_thread_impl_Address_Array,
      Overflow_Protocol_Array => parking_system_car_passed_entry_thread_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_system_car_passed_entry_thread_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_car_passed_entry_thread_K,
      Thread_Port_Kinds => parking_system_car_passed_entry_thread_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_system_car_passed_entry_thread_Port_Images,
      Thread_Fifo_Sizes => parking_system_car_passed_entry_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_system_car_passed_entry_thread_Offsets,
      Thread_Overflow_Protocols => parking_system_car_passed_entry_thread_Overflow_Protocols,
      Urgencies => parking_system_car_passed_entry_thread_Urgencies,
      Global_Data_Queue_Size => parking_system_car_passed_entry_thread_Total_FIFO_Size,
      N_Destinations => parking_system_car_passed_entry_thread_N_Destinations,
      Destinations => car_passed_entry_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_system_car_passed_entry_thread_Task.Next_Deadline);

  --  Aperiodic task : car_passed_entry_thread

  ------------------------------------------------
  -- parking_system_car_passed_entry_thread_Job -- 
  ------------------------------------------------

  function parking_system_car_passed_entry_thread_Job
   (Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    startGateClosingIn_Status : PolyORB_HI_Generated.Subprograms.parking_system_startGateClosingIn_Status;
    pragma Unreferenced
     (Port);
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    parking_system_car_passed_entry_thread_Interrogators.Next_Value
     (parking_system_car_passed_entry_thread_impl_Port_Type'
       (car_on_loop));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_system_startGateClosingIn
     (Status => startGateClosingIn_Status);
    if (PolyORB_HI_Generated.Subprograms.Get_Count
     (startGateClosingIn_Status,
      PolyORB_HI_Generated.Subprograms.parking_system_startGateClosingIn_Port_Type'
       (PolyORB_HI_Generated.Subprograms.close_gate_in))
      >= 1)
    then
      PolyORB_HI_Generated.Activity.Put_Value
       (PolyORB_HI_Generated.Deployment.main_car_passed_entry_thread_K,
        PolyORB_HI_Generated.Activity.parking_system_car_passed_entry_thread_impl_Interface'
         (Port => close_gate));
    end if;
    --  Send the call sequence OUT port values
    Error_Ü :=
     parking_system_car_passed_entry_thread_Interrogators.Send_Output
       (close_gate);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end parking_system_car_passed_entry_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  car_parked_thread.impl

  type parking_system_car_parked_thread_impl_Integer_Array is
   array (parking_system_car_parked_thread_impl_Port_Type)
     of Standard.Integer;

  type parking_system_car_parked_thread_impl_Port_Kind_Array is
   array (parking_system_car_parked_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_parking_system_car_parked_thread_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_system_car_parked_thread_impl_Port_Image_Array is
   array (parking_system_car_parked_thread_impl_Port_Type)
     of UT_Activity_Main_parking_system_car_parked_thread_impl_Port_Image_Array_Component;

  type parking_system_car_parked_thread_impl_Address_Array is
   array (parking_system_car_parked_thread_impl_Port_Type)
     of System.Address;

  type parking_system_car_parked_thread_impl_Overflow_Protocol_Array is
   array (parking_system_car_parked_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component 
  --  car_parked_thread.impl

  parking_system_car_parked_thread_Port_Kinds : constant parking_system_car_parked_thread_impl_Port_Kind_Array :=
   (slots_number =>
     PolyORB_HI.Port_Kinds.Out_Data_Port,
    car_parked =>
     PolyORB_HI.Port_Kinds.In_Event_Port);

  parking_system_car_parked_thread_Port_Images : constant parking_system_car_parked_thread_impl_Port_Image_Array :=
   (slots_number =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_car_parked_thread_slots_number_K),
    car_parked =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_car_parked_thread_car_parked_K));

  parking_system_car_parked_thread_FIFO_Sizes : constant parking_system_car_parked_thread_impl_Integer_Array :=
   (slots_number =>
     -1,
    car_parked =>
     16);

  parking_system_car_parked_thread_Offsets : constant parking_system_car_parked_thread_impl_Integer_Array :=
   (slots_number =>
     0,
    car_parked =>
     1);

  parking_system_car_parked_thread_Overflow_Protocols : constant parking_system_car_parked_thread_impl_Overflow_Protocol_Array :=
   (slots_number =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    car_parked =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_system_car_parked_thread_Urgencies : constant parking_system_car_parked_thread_impl_Integer_Array :=
   (slots_number =>
     0,
    car_parked =>
     0);

  parking_system_car_parked_thread_Total_FIFO_Size : constant Standard.Integer :=
   16;

  parking_system_car_parked_thread_N_Destinations : constant parking_system_car_parked_thread_impl_Integer_Array :=
   (slots_number =>
     0,
    car_parked =>
     0);

  car_parked_thread_Destinations : constant parking_system_car_parked_thread_impl_Address_Array :=
   (slots_number =>
     System.null_Address,
    car_parked =>
     System.null_Address);

  package parking_system_car_parked_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_system_car_parked_thread_impl_Port_Type,
      Integer_Array => parking_system_car_parked_thread_impl_Integer_Array,
      Port_Kind_Array => parking_system_car_parked_thread_impl_Port_Kind_Array,
      Port_Image_Array => parking_system_car_parked_thread_impl_Port_Image_Array,
      Address_Array => parking_system_car_parked_thread_impl_Address_Array,
      Overflow_Protocol_Array => parking_system_car_parked_thread_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_system_car_parked_thread_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_car_parked_thread_K,
      Thread_Port_Kinds => parking_system_car_parked_thread_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_system_car_parked_thread_Port_Images,
      Thread_Fifo_Sizes => parking_system_car_parked_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_system_car_parked_thread_Offsets,
      Thread_Overflow_Protocols => parking_system_car_parked_thread_Overflow_Protocols,
      Urgencies => parking_system_car_parked_thread_Urgencies,
      Global_Data_Queue_Size => parking_system_car_parked_thread_Total_FIFO_Size,
      N_Destinations => parking_system_car_parked_thread_N_Destinations,
      Destinations => car_parked_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_system_car_parked_thread_Task.Next_Deadline);

  --  Aperiodic task : car_parked_thread

  ------------------------------------------
  -- parking_system_car_parked_thread_Job -- 
  ------------------------------------------

  function parking_system_car_parked_thread_Job
   (Port : parking_system_car_parked_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    slots_number_V : PolyORB_HI_Generated.Types.Integer;
    pragma Unreferenced
     (Port);
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    parking_system_car_parked_thread_Interrogators.Next_Value
     (parking_system_car_parked_thread_impl_Port_Type'
       (car_parked));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_system_incrementAvailableSlots
     (slots_number => slots_number_V);
    --  Set the call sequence OUT port values
    parking_system_car_parked_thread_Interrogators.Put_Value
     (parking_system_car_parked_thread_impl_Interface'
       (Port => slots_number,
        slots_number_DATA => slots_number_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     parking_system_car_parked_thread_Interrogators.Send_Output
       (slots_number);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end parking_system_car_parked_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  car_moved_thread.impl

  type parking_system_car_moved_thread_impl_Integer_Array is
   array (parking_system_car_moved_thread_impl_Port_Type)
     of Standard.Integer;

  type parking_system_car_moved_thread_impl_Port_Kind_Array is
   array (parking_system_car_moved_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_parking_system_car_moved_thread_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_system_car_moved_thread_impl_Port_Image_Array is
   array (parking_system_car_moved_thread_impl_Port_Type)
     of UT_Activity_Main_parking_system_car_moved_thread_impl_Port_Image_Array_Component;

  type parking_system_car_moved_thread_impl_Address_Array is
   array (parking_system_car_moved_thread_impl_Port_Type)
     of System.Address;

  type parking_system_car_moved_thread_impl_Overflow_Protocol_Array is
   array (parking_system_car_moved_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component 
  --  car_moved_thread.impl

  parking_system_car_moved_thread_Port_Kinds : constant parking_system_car_moved_thread_impl_Port_Kind_Array :=
   (slots_number =>
     PolyORB_HI.Port_Kinds.Out_Data_Port,
    car_moved =>
     PolyORB_HI.Port_Kinds.In_Event_Port);

  parking_system_car_moved_thread_Port_Images : constant parking_system_car_moved_thread_impl_Port_Image_Array :=
   (slots_number =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_car_moved_thread_slots_number_K),
    car_moved =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_car_moved_thread_car_moved_K));

  parking_system_car_moved_thread_FIFO_Sizes : constant parking_system_car_moved_thread_impl_Integer_Array :=
   (slots_number =>
     -1,
    car_moved =>
     16);

  parking_system_car_moved_thread_Offsets : constant parking_system_car_moved_thread_impl_Integer_Array :=
   (slots_number =>
     0,
    car_moved =>
     1);

  parking_system_car_moved_thread_Overflow_Protocols : constant parking_system_car_moved_thread_impl_Overflow_Protocol_Array :=
   (slots_number =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    car_moved =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_system_car_moved_thread_Urgencies : constant parking_system_car_moved_thread_impl_Integer_Array :=
   (slots_number =>
     0,
    car_moved =>
     0);

  parking_system_car_moved_thread_Total_FIFO_Size : constant Standard.Integer :=
   16;

  parking_system_car_moved_thread_N_Destinations : constant parking_system_car_moved_thread_impl_Integer_Array :=
   (slots_number =>
     0,
    car_moved =>
     0);

  car_moved_thread_Destinations : constant parking_system_car_moved_thread_impl_Address_Array :=
   (slots_number =>
     System.null_Address,
    car_moved =>
     System.null_Address);

  package parking_system_car_moved_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_system_car_moved_thread_impl_Port_Type,
      Integer_Array => parking_system_car_moved_thread_impl_Integer_Array,
      Port_Kind_Array => parking_system_car_moved_thread_impl_Port_Kind_Array,
      Port_Image_Array => parking_system_car_moved_thread_impl_Port_Image_Array,
      Address_Array => parking_system_car_moved_thread_impl_Address_Array,
      Overflow_Protocol_Array => parking_system_car_moved_thread_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_system_car_moved_thread_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_car_moved_thread_K,
      Thread_Port_Kinds => parking_system_car_moved_thread_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_system_car_moved_thread_Port_Images,
      Thread_Fifo_Sizes => parking_system_car_moved_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_system_car_moved_thread_Offsets,
      Thread_Overflow_Protocols => parking_system_car_moved_thread_Overflow_Protocols,
      Urgencies => parking_system_car_moved_thread_Urgencies,
      Global_Data_Queue_Size => parking_system_car_moved_thread_Total_FIFO_Size,
      N_Destinations => parking_system_car_moved_thread_N_Destinations,
      Destinations => car_moved_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_system_car_moved_thread_Task.Next_Deadline);

  --  Aperiodic task : car_moved_thread

  -----------------------------------------
  -- parking_system_car_moved_thread_Job -- 
  -----------------------------------------

  function parking_system_car_moved_thread_Job
   (Port : parking_system_car_moved_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    slots_number_V : PolyORB_HI_Generated.Types.Integer;
    pragma Unreferenced
     (Port);
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    parking_system_car_moved_thread_Interrogators.Next_Value
     (parking_system_car_moved_thread_impl_Port_Type'
       (car_moved));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_system_decrementAvailableSlots
     (slots_number => slots_number_V);
    --  Set the call sequence OUT port values
    parking_system_car_moved_thread_Interrogators.Put_Value
     (parking_system_car_moved_thread_impl_Interface'
       (Port => slots_number,
        slots_number_DATA => slots_number_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     parking_system_car_moved_thread_Interrogators.Send_Output
       (slots_number);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end parking_system_car_moved_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  inductive_loop_out_thread.impl

  type parking_system_inductive_loop_out_thread_impl_Integer_Array is
   array (parking_system_inductive_loop_out_thread_impl_Port_Type)
     of Standard.Integer;

  type parking_system_inductive_loop_out_thread_impl_Port_Kind_Array is
   array (parking_system_inductive_loop_out_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_parking_system_inductive_loop_out_thread_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_system_inductive_loop_out_thread_impl_Port_Image_Array is
   array (parking_system_inductive_loop_out_thread_impl_Port_Type)
     of UT_Activity_Main_parking_system_inductive_loop_out_thread_impl_Port_Image_Array_Component;

  type parking_system_inductive_loop_out_thread_impl_Address_Array is
   array (parking_system_inductive_loop_out_thread_impl_Port_Type)
     of System.Address;

  type parking_system_inductive_loop_out_thread_impl_Overflow_Protocol_Array is
   array (parking_system_inductive_loop_out_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component 
  --  inductive_loop_out_thread.impl

  parking_system_inductive_loop_out_thread_Port_Kinds : constant parking_system_inductive_loop_out_thread_impl_Port_Kind_Array :=
   (car_on_loop =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    recognize_plates_out =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  parking_system_inductive_loop_out_thread_Port_Images : constant parking_system_inductive_loop_out_thread_impl_Port_Image_Array :=
   (car_on_loop =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_inductive_loop_out_thread_car_on_loop_K),
    recognize_plates_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_inductive_loop_out_thread_recognize_plates_out_K));

  parking_system_inductive_loop_out_thread_FIFO_Sizes : constant parking_system_inductive_loop_out_thread_impl_Integer_Array :=
   (car_on_loop =>
     16,
    recognize_plates_out =>
     -1);

  parking_system_inductive_loop_out_thread_Offsets : constant parking_system_inductive_loop_out_thread_impl_Integer_Array :=
   (car_on_loop =>
     1,
    recognize_plates_out =>
     0);

  parking_system_inductive_loop_out_thread_Overflow_Protocols : constant parking_system_inductive_loop_out_thread_impl_Overflow_Protocol_Array :=
   (car_on_loop =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    recognize_plates_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_system_inductive_loop_out_thread_Urgencies : constant parking_system_inductive_loop_out_thread_impl_Integer_Array :=
   (car_on_loop =>
     0,
    recognize_plates_out =>
     0);

  parking_system_inductive_loop_out_thread_Total_FIFO_Size : constant Standard.Integer :=
   16;

  parking_system_inductive_loop_out_thread_N_Destinations : constant parking_system_inductive_loop_out_thread_impl_Integer_Array :=
   (car_on_loop =>
     0,
    recognize_plates_out =>
     0);

  inductive_loop_out_thread_Destinations : constant parking_system_inductive_loop_out_thread_impl_Address_Array :=
   (car_on_loop =>
     System.null_Address,
    recognize_plates_out =>
     System.null_Address);

  package parking_system_inductive_loop_out_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_system_inductive_loop_out_thread_impl_Port_Type,
      Integer_Array => parking_system_inductive_loop_out_thread_impl_Integer_Array,
      Port_Kind_Array => parking_system_inductive_loop_out_thread_impl_Port_Kind_Array,
      Port_Image_Array => parking_system_inductive_loop_out_thread_impl_Port_Image_Array,
      Address_Array => parking_system_inductive_loop_out_thread_impl_Address_Array,
      Overflow_Protocol_Array => parking_system_inductive_loop_out_thread_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_system_inductive_loop_out_thread_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_inductive_loop_out_thread_K,
      Thread_Port_Kinds => parking_system_inductive_loop_out_thread_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_system_inductive_loop_out_thread_Port_Images,
      Thread_Fifo_Sizes => parking_system_inductive_loop_out_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_system_inductive_loop_out_thread_Offsets,
      Thread_Overflow_Protocols => parking_system_inductive_loop_out_thread_Overflow_Protocols,
      Urgencies => parking_system_inductive_loop_out_thread_Urgencies,
      Global_Data_Queue_Size => parking_system_inductive_loop_out_thread_Total_FIFO_Size,
      N_Destinations => parking_system_inductive_loop_out_thread_N_Destinations,
      Destinations => inductive_loop_out_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_system_inductive_loop_out_thread_Task.Next_Deadline);

  --  Aperiodic task : inductive_loop_out_thread

  --------------------------------------------------
  -- parking_system_inductive_loop_out_thread_Job -- 
  --------------------------------------------------

  function parking_system_inductive_loop_out_thread_Job
   (Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    startPlatesRecognition_Status : PolyORB_HI_Generated.Subprograms.parking_system_startPlatesRecognitionOut_Status;
    pragma Unreferenced
     (Port);
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    parking_system_inductive_loop_out_thread_Interrogators.Next_Value
     (parking_system_inductive_loop_out_thread_impl_Port_Type'
       (car_on_loop));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_system_startPlatesRecognitionOut
     (Status => startPlatesRecognition_Status);
    if (PolyORB_HI_Generated.Subprograms.Get_Count
     (startPlatesRecognition_Status,
      PolyORB_HI_Generated.Subprograms.parking_system_startPlatesRecognitionOut_Port_Type'
       (PolyORB_HI_Generated.Subprograms.recognize_plates))
      >= 1)
    then
      PolyORB_HI_Generated.Activity.Put_Value
       (PolyORB_HI_Generated.Deployment.main_inductive_loop_out_thread_K,
        PolyORB_HI_Generated.Activity.parking_system_inductive_loop_out_thread_impl_Interface'
         (Port => recognize_plates_out));
    end if;
    --  Send the call sequence OUT port values
    Error_Ü :=
     parking_system_inductive_loop_out_thread_Interrogators.Send_Output
       (recognize_plates_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end parking_system_inductive_loop_out_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  calculate_price.impl

  type parking_system_calculate_price_impl_Integer_Array is
   array (parking_system_calculate_price_impl_Port_Type)
     of Standard.Integer;

  type parking_system_calculate_price_impl_Port_Kind_Array is
   array (parking_system_calculate_price_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_parking_system_calculate_price_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_system_calculate_price_impl_Port_Image_Array is
   array (parking_system_calculate_price_impl_Port_Type)
     of UT_Activity_Main_parking_system_calculate_price_impl_Port_Image_Array_Component;

  type parking_system_calculate_price_impl_Address_Array is
   array (parking_system_calculate_price_impl_Port_Type)
     of System.Address;

  type parking_system_calculate_price_impl_Overflow_Protocol_Array is
   array (parking_system_calculate_price_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component calculate_price.impl

  parking_system_calculate_price_Port_Kinds : constant parking_system_calculate_price_impl_Port_Kind_Array :=
   (plate_number_event =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    plate_number =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    calculated_price =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  parking_system_calculate_price_Port_Images : constant parking_system_calculate_price_impl_Port_Image_Array :=
   (plate_number_event =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_calculate_price_plate_number_event_K),
    plate_number =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_calculate_price_plate_number_K),
    calculated_price =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_calculate_price_calculated_price_K));

  parking_system_calculate_price_FIFO_Sizes : constant parking_system_calculate_price_impl_Integer_Array :=
   (plate_number_event =>
     16,
    plate_number =>
     1,
    calculated_price =>
     -1);

  parking_system_calculate_price_Offsets : constant parking_system_calculate_price_impl_Integer_Array :=
   (plate_number_event =>
     1,
    plate_number =>
     17,
    calculated_price =>
     0);

  parking_system_calculate_price_Overflow_Protocols : constant parking_system_calculate_price_impl_Overflow_Protocol_Array :=
   (plate_number_event =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    plate_number =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    calculated_price =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_system_calculate_price_Urgencies : constant parking_system_calculate_price_impl_Integer_Array :=
   (plate_number_event =>
     0,
    plate_number =>
     0,
    calculated_price =>
     0);

  parking_system_calculate_price_Total_FIFO_Size : constant Standard.Integer :=
   17;

  parking_system_calculate_price_N_Destinations : constant parking_system_calculate_price_impl_Integer_Array :=
   (plate_number_event =>
     0,
    plate_number =>
     0,
    calculated_price =>
     0);

  calculate_price_Destinations : constant parking_system_calculate_price_impl_Address_Array :=
   (plate_number_event =>
     System.null_Address,
    plate_number =>
     System.null_Address,
    calculated_price =>
     System.null_Address);

  package parking_system_calculate_price_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_system_calculate_price_impl_Port_Type,
      Integer_Array => parking_system_calculate_price_impl_Integer_Array,
      Port_Kind_Array => parking_system_calculate_price_impl_Port_Kind_Array,
      Port_Image_Array => parking_system_calculate_price_impl_Port_Image_Array,
      Address_Array => parking_system_calculate_price_impl_Address_Array,
      Overflow_Protocol_Array => parking_system_calculate_price_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_system_calculate_price_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_calculate_price_K,
      Thread_Port_Kinds => parking_system_calculate_price_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_system_calculate_price_Port_Images,
      Thread_Fifo_Sizes => parking_system_calculate_price_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_system_calculate_price_Offsets,
      Thread_Overflow_Protocols => parking_system_calculate_price_Overflow_Protocols,
      Urgencies => parking_system_calculate_price_Urgencies,
      Global_Data_Queue_Size => parking_system_calculate_price_Total_FIFO_Size,
      N_Destinations => parking_system_calculate_price_N_Destinations,
      Destinations => calculate_price_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_system_calculate_price_Task.Next_Deadline);

  --  Aperiodic task : calculate_price

  ----------------------------------------
  -- parking_system_calculate_price_Job -- 
  ----------------------------------------

  function parking_system_calculate_price_Job
   (Port : parking_system_calculate_price_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    plate_number_V : PolyORB_HI_Generated.Types.Integer;
    calculated_price_V : PolyORB_HI_Generated.Types.Integer;
    pragma Unreferenced
     (Port);
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (parking_system_calculate_price_Interrogators.Get_Count
     (plate_number)
      /= -1)
    then
      plate_number_V :=
       parking_system_calculate_price_Interrogators.Get_Value
         (plate_number).plate_number_DATA;
    else
      plate_number_V :=
       PolyORB_HI_Generated.Types.Integer_Default_Value;
    end if;
    --  Dequeue the IN port values
    parking_system_calculate_price_Interrogators.Next_Value
     (parking_system_calculate_price_impl_Port_Type'
       (plate_number_event));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_system_calculatePriceForCarWithPlate
     (plate_number => plate_number_V,
      calculated_price => calculated_price_V);
    --  Set the call sequence OUT port values
    parking_system_calculate_price_Interrogators.Put_Value
     (parking_system_calculate_price_impl_Interface'
       (Port => calculated_price,
        calculated_price_DATA => calculated_price_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     parking_system_calculate_price_Interrogators.Send_Output
       (calculated_price);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end parking_system_calculate_price_Job;

  --  BEGIN: Data types used by all instances of component 
  --  open_gate_out_thread.impl

  type parking_system_open_gate_out_thread_impl_Integer_Array is
   array (parking_system_open_gate_out_thread_impl_Port_Type)
     of Standard.Integer;

  type parking_system_open_gate_out_thread_impl_Port_Kind_Array is
   array (parking_system_open_gate_out_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_parking_system_open_gate_out_thread_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_system_open_gate_out_thread_impl_Port_Image_Array is
   array (parking_system_open_gate_out_thread_impl_Port_Type)
     of UT_Activity_Main_parking_system_open_gate_out_thread_impl_Port_Image_Array_Component;

  type parking_system_open_gate_out_thread_impl_Address_Array is
   array (parking_system_open_gate_out_thread_impl_Port_Type)
     of System.Address;

  type parking_system_open_gate_out_thread_impl_Overflow_Protocol_Array is
   array (parking_system_open_gate_out_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component 
  --  open_gate_out_thread.impl

  parking_system_open_gate_out_thread_Port_Kinds : constant parking_system_open_gate_out_thread_impl_Port_Kind_Array :=
   (parking_paid =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    open_gate_out =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  parking_system_open_gate_out_thread_Port_Images : constant parking_system_open_gate_out_thread_impl_Port_Image_Array :=
   (parking_paid =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_open_gate_out_thread_parking_paid_K),
    open_gate_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_open_gate_out_thread_open_gate_out_K));

  parking_system_open_gate_out_thread_FIFO_Sizes : constant parking_system_open_gate_out_thread_impl_Integer_Array :=
   (parking_paid =>
     16,
    open_gate_out =>
     -1);

  parking_system_open_gate_out_thread_Offsets : constant parking_system_open_gate_out_thread_impl_Integer_Array :=
   (parking_paid =>
     1,
    open_gate_out =>
     0);

  parking_system_open_gate_out_thread_Overflow_Protocols : constant parking_system_open_gate_out_thread_impl_Overflow_Protocol_Array :=
   (parking_paid =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    open_gate_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_system_open_gate_out_thread_Urgencies : constant parking_system_open_gate_out_thread_impl_Integer_Array :=
   (parking_paid =>
     0,
    open_gate_out =>
     0);

  parking_system_open_gate_out_thread_Total_FIFO_Size : constant Standard.Integer :=
   16;

  parking_system_open_gate_out_thread_N_Destinations : constant parking_system_open_gate_out_thread_impl_Integer_Array :=
   (parking_paid =>
     0,
    open_gate_out =>
     0);

  open_gate_out_thread_Destinations : constant parking_system_open_gate_out_thread_impl_Address_Array :=
   (parking_paid =>
     System.null_Address,
    open_gate_out =>
     System.null_Address);

  package parking_system_open_gate_out_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_system_open_gate_out_thread_impl_Port_Type,
      Integer_Array => parking_system_open_gate_out_thread_impl_Integer_Array,
      Port_Kind_Array => parking_system_open_gate_out_thread_impl_Port_Kind_Array,
      Port_Image_Array => parking_system_open_gate_out_thread_impl_Port_Image_Array,
      Address_Array => parking_system_open_gate_out_thread_impl_Address_Array,
      Overflow_Protocol_Array => parking_system_open_gate_out_thread_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_system_open_gate_out_thread_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_open_gate_out_thread_K,
      Thread_Port_Kinds => parking_system_open_gate_out_thread_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_system_open_gate_out_thread_Port_Images,
      Thread_Fifo_Sizes => parking_system_open_gate_out_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_system_open_gate_out_thread_Offsets,
      Thread_Overflow_Protocols => parking_system_open_gate_out_thread_Overflow_Protocols,
      Urgencies => parking_system_open_gate_out_thread_Urgencies,
      Global_Data_Queue_Size => parking_system_open_gate_out_thread_Total_FIFO_Size,
      N_Destinations => parking_system_open_gate_out_thread_N_Destinations,
      Destinations => open_gate_out_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_system_open_gate_out_thread_Task.Next_Deadline);

  --  Aperiodic task : open_gate_out_thread

  ---------------------------------------------
  -- parking_system_open_gate_out_thread_Job -- 
  ---------------------------------------------

  function parking_system_open_gate_out_thread_Job
   (Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    startGateOpeningOut_Status : PolyORB_HI_Generated.Subprograms.parking_system_startGateOpeningOut_Status;
    pragma Unreferenced
     (Port);
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    parking_system_open_gate_out_thread_Interrogators.Next_Value
     (parking_system_open_gate_out_thread_impl_Port_Type'
       (parking_paid));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_system_startGateOpeningOut
     (Status => startGateOpeningOut_Status);
    if (PolyORB_HI_Generated.Subprograms.Get_Count
     (startGateOpeningOut_Status,
      PolyORB_HI_Generated.Subprograms.parking_system_startGateOpeningOut_Port_Type'
       (PolyORB_HI_Generated.Subprograms.open_gate_out))
      >= 1)
    then
      PolyORB_HI_Generated.Activity.Put_Value
       (PolyORB_HI_Generated.Deployment.main_open_gate_out_thread_K,
        PolyORB_HI_Generated.Activity.parking_system_open_gate_out_thread_impl_Interface'
         (Port => open_gate_out));
    end if;
    --  Send the call sequence OUT port values
    Error_Ü :=
     parking_system_open_gate_out_thread_Interrogators.Send_Output
       (open_gate_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end parking_system_open_gate_out_thread_Job;

  --  BEGIN: Data types used by all instances of component 
  --  car_passed_exit_thread.impl

  type parking_system_car_passed_exit_thread_impl_Integer_Array is
   array (parking_system_car_passed_exit_thread_impl_Port_Type)
     of Standard.Integer;

  type parking_system_car_passed_exit_thread_impl_Port_Kind_Array is
   array (parking_system_car_passed_exit_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_parking_system_car_passed_exit_thread_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_system_car_passed_exit_thread_impl_Port_Image_Array is
   array (parking_system_car_passed_exit_thread_impl_Port_Type)
     of UT_Activity_Main_parking_system_car_passed_exit_thread_impl_Port_Image_Array_Component;

  type parking_system_car_passed_exit_thread_impl_Address_Array is
   array (parking_system_car_passed_exit_thread_impl_Port_Type)
     of System.Address;

  type parking_system_car_passed_exit_thread_impl_Overflow_Protocol_Array is
   array (parking_system_car_passed_exit_thread_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component 
  --  car_passed_exit_thread.impl

  parking_system_car_passed_exit_thread_Port_Kinds : constant parking_system_car_passed_exit_thread_impl_Port_Kind_Array :=
   (car_on_loop =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    close_gate =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  parking_system_car_passed_exit_thread_Port_Images : constant parking_system_car_passed_exit_thread_impl_Port_Image_Array :=
   (car_on_loop =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_car_passed_exit_thread_car_on_loop_K),
    close_gate =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_car_passed_exit_thread_close_gate_K));

  parking_system_car_passed_exit_thread_FIFO_Sizes : constant parking_system_car_passed_exit_thread_impl_Integer_Array :=
   (car_on_loop =>
     16,
    close_gate =>
     -1);

  parking_system_car_passed_exit_thread_Offsets : constant parking_system_car_passed_exit_thread_impl_Integer_Array :=
   (car_on_loop =>
     1,
    close_gate =>
     0);

  parking_system_car_passed_exit_thread_Overflow_Protocols : constant parking_system_car_passed_exit_thread_impl_Overflow_Protocol_Array :=
   (car_on_loop =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    close_gate =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_system_car_passed_exit_thread_Urgencies : constant parking_system_car_passed_exit_thread_impl_Integer_Array :=
   (car_on_loop =>
     0,
    close_gate =>
     0);

  parking_system_car_passed_exit_thread_Total_FIFO_Size : constant Standard.Integer :=
   16;

  parking_system_car_passed_exit_thread_N_Destinations : constant parking_system_car_passed_exit_thread_impl_Integer_Array :=
   (car_on_loop =>
     0,
    close_gate =>
     0);

  car_passed_exit_thread_Destinations : constant parking_system_car_passed_exit_thread_impl_Address_Array :=
   (car_on_loop =>
     System.null_Address,
    close_gate =>
     System.null_Address);

  package parking_system_car_passed_exit_thread_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_system_car_passed_exit_thread_impl_Port_Type,
      Integer_Array => parking_system_car_passed_exit_thread_impl_Integer_Array,
      Port_Kind_Array => parking_system_car_passed_exit_thread_impl_Port_Kind_Array,
      Port_Image_Array => parking_system_car_passed_exit_thread_impl_Port_Image_Array,
      Address_Array => parking_system_car_passed_exit_thread_impl_Address_Array,
      Overflow_Protocol_Array => parking_system_car_passed_exit_thread_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_system_car_passed_exit_thread_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_car_passed_exit_thread_K,
      Thread_Port_Kinds => parking_system_car_passed_exit_thread_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_system_car_passed_exit_thread_Port_Images,
      Thread_Fifo_Sizes => parking_system_car_passed_exit_thread_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_system_car_passed_exit_thread_Offsets,
      Thread_Overflow_Protocols => parking_system_car_passed_exit_thread_Overflow_Protocols,
      Urgencies => parking_system_car_passed_exit_thread_Urgencies,
      Global_Data_Queue_Size => parking_system_car_passed_exit_thread_Total_FIFO_Size,
      N_Destinations => parking_system_car_passed_exit_thread_N_Destinations,
      Destinations => car_passed_exit_thread_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_system_car_passed_exit_thread_Task.Next_Deadline);

  --  Aperiodic task : car_passed_exit_thread

  -----------------------------------------------
  -- parking_system_car_passed_exit_thread_Job -- 
  -----------------------------------------------

  function parking_system_car_passed_exit_thread_Job
   (Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    startGateClosingOut_Status : PolyORB_HI_Generated.Subprograms.parking_system_startGateClosingOut_Status;
    pragma Unreferenced
     (Port);
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    parking_system_car_passed_exit_thread_Interrogators.Next_Value
     (parking_system_car_passed_exit_thread_impl_Port_Type'
       (car_on_loop));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_system_startGateClosingOut
     (Status => startGateClosingOut_Status);
    if (PolyORB_HI_Generated.Subprograms.Get_Count
     (startGateClosingOut_Status,
      PolyORB_HI_Generated.Subprograms.parking_system_startGateClosingOut_Port_Type'
       (PolyORB_HI_Generated.Subprograms.close_gate_out))
      >= 1)
    then
      PolyORB_HI_Generated.Activity.Put_Value
       (PolyORB_HI_Generated.Deployment.main_car_passed_exit_thread_K,
        PolyORB_HI_Generated.Activity.parking_system_car_passed_exit_thread_impl_Interface'
         (Port => close_gate));
    end if;
    --  Send the call sequence OUT port values
    Error_Ü :=
     parking_system_car_passed_exit_thread_Interrogators.Send_Output
       (close_gate);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end parking_system_car_passed_exit_thread_Job;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_system_inductive_loop_in_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_inductive_loop_in_thread_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_inductive_loop_in_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_inductive_loop_in_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return parking_system_inductive_loop_in_thread_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_inductive_loop_in_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_inductive_loop_in_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_inductive_loop_in_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_inductive_loop_in_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_in_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_inductive_loop_in_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_inductive_loop_in_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_inductive_loop_in_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_inductive_loop_in_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_inductive_loop_in_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_system_plates_data_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_plates_data_thread_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_plates_data_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_plates_data_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
   return parking_system_plates_data_thread_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_plates_data_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_plates_data_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_plates_data_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_plates_data_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_plates_data_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_plates_data_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_plates_data_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_plates_data_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_plates_data_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_plates_data_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_system_car_passed_entry_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_passed_entry_thread_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_passed_entry_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_passed_entry_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return parking_system_car_passed_entry_thread_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_passed_entry_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_passed_entry_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_passed_entry_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_passed_entry_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_entry_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_passed_entry_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_passed_entry_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_passed_entry_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_car_passed_entry_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_passed_entry_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_system_car_parked_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_parked_thread_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_parked_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_parked_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
   return parking_system_car_parked_thread_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_parked_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_parked_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_parked_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_parked_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_parked_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_parked_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_parked_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_parked_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_car_parked_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_parked_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_system_car_moved_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_moved_thread_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_moved_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_moved_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
   return parking_system_car_moved_thread_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_moved_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_moved_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_moved_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_moved_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_moved_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_moved_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_moved_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_moved_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_car_moved_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_moved_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_system_inductive_loop_out_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_inductive_loop_out_thread_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_inductive_loop_out_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_inductive_loop_out_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return parking_system_inductive_loop_out_thread_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_inductive_loop_out_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_inductive_loop_out_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_inductive_loop_out_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_inductive_loop_out_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_inductive_loop_out_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_inductive_loop_out_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_inductive_loop_out_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_inductive_loop_out_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_inductive_loop_out_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_inductive_loop_out_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_system_calculate_price_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_calculate_price_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_calculate_price_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_calculate_price_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
   return parking_system_calculate_price_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_calculate_price_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_calculate_price_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_calculate_price_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_calculate_price_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_calculate_price_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_calculate_price_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_calculate_price_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_calculate_price_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_calculate_price_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_calculate_price_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_system_open_gate_out_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_open_gate_out_thread_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_open_gate_out_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_open_gate_out_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return parking_system_open_gate_out_thread_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_open_gate_out_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_open_gate_out_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_open_gate_out_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_open_gate_out_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_open_gate_out_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_open_gate_out_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_open_gate_out_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_open_gate_out_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_open_gate_out_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_open_gate_out_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_system_car_passed_exit_thread_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_passed_exit_thread_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_passed_exit_thread_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_passed_exit_thread_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return parking_system_car_passed_exit_thread_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_passed_exit_thread_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_passed_exit_thread_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_passed_exit_thread_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_system_car_passed_exit_thread_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_system_car_passed_exit_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_passed_exit_thread_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_system_car_passed_exit_thread_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_passed_exit_thread_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_system_car_passed_exit_thread_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_system_car_passed_exit_thread_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

end PolyORB_HI_Generated.Activity;
