--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");


package body PolyORB_HI_Generated.Subprograms is

  ---------------------------------------------
  -- parking_system_startPlatesRecognitionIn -- 
  ---------------------------------------------

  procedure parking_system_startPlatesRecognitionIn
   (Status : in out PolyORB_HI_Generated.Subprograms.parking_system_startPlatesRecognitionIn_Status)
  is
    Nyi : exception;
  begin
    raise Nyi;
  end parking_system_startPlatesRecognitionIn;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Status : in out parking_system_startPlatesRecognitionIn_Status;
    Spg_Interface : parking_system_startPlatesRecognitionIn_Interface)
  is
  begin
    case Spg_Interface.Port is
      when recognize_plates =>
        Status.recognize_plates :=
         True;

    end case;
  end Put_Value;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Status : parking_system_startPlatesRecognitionIn_Status;
    Port : parking_system_startPlatesRecognitionIn_Port_Type)
   return parking_system_startPlatesRecognitionIn_Interface
  is
  begin
    case Port is
      when recognize_plates =>
        return (Port => recognize_plates);

    end case;
  end Get_Value;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Status : in out parking_system_startPlatesRecognitionIn_Status;
    Port : parking_system_startPlatesRecognitionIn_Port_Type)
  is
    pragma Unreferenced
     (Status,
      Port);
  begin
    --  Not implemented yet!
    raise Program_Error;
  end Next_Value;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Status : parking_system_startPlatesRecognitionIn_Status;
    Port : parking_system_startPlatesRecognitionIn_Port_Type)
   return Standard.Integer
  is
  begin
    case Port is
      when recognize_plates =>
        if Status.recognize_plates
        then
          return 1;
        else
          return 0;
        end if;

    end case;
  end Get_Count;

  --------------------------------------------
  -- parking_system_getPlateNumberFromVideo -- 
  --------------------------------------------

  procedure parking_system_getPlateNumberFromVideo
   (plates_data_in : PolyORB_HI_Generated.Types.Integer;
    Status : in out PolyORB_HI_Generated.Subprograms.parking_system_getPlateNumberFromVideo_Status)
  is
    Nyi : exception;
  begin
    raise Nyi;
  end parking_system_getPlateNumberFromVideo;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Status : in out parking_system_getPlateNumberFromVideo_Status;
    Spg_Interface : parking_system_getPlateNumberFromVideo_Interface)
  is
  begin
    case Spg_Interface.Port is
      when open_gate_in =>
        Status.open_gate_in :=
         True;

    end case;
  end Put_Value;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Status : parking_system_getPlateNumberFromVideo_Status;
    Port : parking_system_getPlateNumberFromVideo_Port_Type)
   return parking_system_getPlateNumberFromVideo_Interface
  is
  begin
    case Port is
      when open_gate_in =>
        return (Port => open_gate_in);

    end case;
  end Get_Value;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Status : in out parking_system_getPlateNumberFromVideo_Status;
    Port : parking_system_getPlateNumberFromVideo_Port_Type)
  is
    pragma Unreferenced
     (Status,
      Port);
  begin
    --  Not implemented yet!
    raise Program_Error;
  end Next_Value;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Status : parking_system_getPlateNumberFromVideo_Status;
    Port : parking_system_getPlateNumberFromVideo_Port_Type)
   return Standard.Integer
  is
  begin
    case Port is
      when open_gate_in =>
        if Status.open_gate_in
        then
          return 1;
        else
          return 0;
        end if;

    end case;
  end Get_Count;

  ---------------------------------------
  -- parking_system_startGateClosingIn -- 
  ---------------------------------------

  procedure parking_system_startGateClosingIn
   (Status : in out PolyORB_HI_Generated.Subprograms.parking_system_startGateClosingIn_Status)
  is
    Nyi : exception;
  begin
    raise Nyi;
  end parking_system_startGateClosingIn;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Status : in out parking_system_startGateClosingIn_Status;
    Spg_Interface : parking_system_startGateClosingIn_Interface)
  is
  begin
    case Spg_Interface.Port is
      when close_gate_in =>
        Status.close_gate_in :=
         True;

    end case;
  end Put_Value;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Status : parking_system_startGateClosingIn_Status;
    Port : parking_system_startGateClosingIn_Port_Type)
   return parking_system_startGateClosingIn_Interface
  is
  begin
    case Port is
      when close_gate_in =>
        return (Port => close_gate_in);

    end case;
  end Get_Value;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Status : in out parking_system_startGateClosingIn_Status;
    Port : parking_system_startGateClosingIn_Port_Type)
  is
    pragma Unreferenced
     (Status,
      Port);
  begin
    --  Not implemented yet!
    raise Program_Error;
  end Next_Value;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Status : parking_system_startGateClosingIn_Status;
    Port : parking_system_startGateClosingIn_Port_Type)
   return Standard.Integer
  is
  begin
    case Port is
      when close_gate_in =>
        if Status.close_gate_in
        then
          return 1;
        else
          return 0;
        end if;

    end case;
  end Get_Count;

  --------------------------------------------
  -- parking_system_incrementAvailableSlots -- 
  --------------------------------------------

  procedure parking_system_incrementAvailableSlots
   (slots_number : out PolyORB_HI_Generated.Types.Integer)
  is
    Nyi : exception;
  begin
    raise Nyi;
  end parking_system_incrementAvailableSlots;

  --------------------------------------------
  -- parking_system_decrementAvailableSlots -- 
  --------------------------------------------

  procedure parking_system_decrementAvailableSlots
   (slots_number : out PolyORB_HI_Generated.Types.Integer)
  is
    Nyi : exception;
  begin
    raise Nyi;
  end parking_system_decrementAvailableSlots;

  ----------------------------------------------
  -- parking_system_startPlatesRecognitionOut -- 
  ----------------------------------------------

  procedure parking_system_startPlatesRecognitionOut
   (Status : in out PolyORB_HI_Generated.Subprograms.parking_system_startPlatesRecognitionOut_Status)
  is
    Nyi : exception;
  begin
    raise Nyi;
  end parking_system_startPlatesRecognitionOut;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Status : in out parking_system_startPlatesRecognitionOut_Status;
    Spg_Interface : parking_system_startPlatesRecognitionOut_Interface)
  is
  begin
    case Spg_Interface.Port is
      when recognize_plates =>
        Status.recognize_plates :=
         True;

    end case;
  end Put_Value;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Status : parking_system_startPlatesRecognitionOut_Status;
    Port : parking_system_startPlatesRecognitionOut_Port_Type)
   return parking_system_startPlatesRecognitionOut_Interface
  is
  begin
    case Port is
      when recognize_plates =>
        return (Port => recognize_plates);

    end case;
  end Get_Value;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Status : in out parking_system_startPlatesRecognitionOut_Status;
    Port : parking_system_startPlatesRecognitionOut_Port_Type)
  is
    pragma Unreferenced
     (Status,
      Port);
  begin
    --  Not implemented yet!
    raise Program_Error;
  end Next_Value;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Status : parking_system_startPlatesRecognitionOut_Status;
    Port : parking_system_startPlatesRecognitionOut_Port_Type)
   return Standard.Integer
  is
  begin
    case Port is
      when recognize_plates =>
        if Status.recognize_plates
        then
          return 1;
        else
          return 0;
        end if;

    end case;
  end Get_Count;

  --------------------------------------------------
  -- parking_system_calculatePriceForCarWithPlate -- 
  --------------------------------------------------

  procedure parking_system_calculatePriceForCarWithPlate
   (plate_number : PolyORB_HI_Generated.Types.Integer;
    calculated_price : out PolyORB_HI_Generated.Types.Integer)
  is
    Nyi : exception;
  begin
    raise Nyi;
  end parking_system_calculatePriceForCarWithPlate;

  ----------------------------------------
  -- parking_system_startGateOpeningOut -- 
  ----------------------------------------

  procedure parking_system_startGateOpeningOut
   (Status : in out PolyORB_HI_Generated.Subprograms.parking_system_startGateOpeningOut_Status)
  is
    Nyi : exception;
  begin
    raise Nyi;
  end parking_system_startGateOpeningOut;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Status : in out parking_system_startGateOpeningOut_Status;
    Spg_Interface : parking_system_startGateOpeningOut_Interface)
  is
  begin
    case Spg_Interface.Port is
      when open_gate_out =>
        Status.open_gate_out :=
         True;

    end case;
  end Put_Value;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Status : parking_system_startGateOpeningOut_Status;
    Port : parking_system_startGateOpeningOut_Port_Type)
   return parking_system_startGateOpeningOut_Interface
  is
  begin
    case Port is
      when open_gate_out =>
        return (Port => open_gate_out);

    end case;
  end Get_Value;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Status : in out parking_system_startGateOpeningOut_Status;
    Port : parking_system_startGateOpeningOut_Port_Type)
  is
    pragma Unreferenced
     (Status,
      Port);
  begin
    --  Not implemented yet!
    raise Program_Error;
  end Next_Value;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Status : parking_system_startGateOpeningOut_Status;
    Port : parking_system_startGateOpeningOut_Port_Type)
   return Standard.Integer
  is
  begin
    case Port is
      when open_gate_out =>
        if Status.open_gate_out
        then
          return 1;
        else
          return 0;
        end if;

    end case;
  end Get_Count;

  ----------------------------------------
  -- parking_system_startGateClosingOut -- 
  ----------------------------------------

  procedure parking_system_startGateClosingOut
   (Status : in out PolyORB_HI_Generated.Subprograms.parking_system_startGateClosingOut_Status)
  is
    Nyi : exception;
  begin
    raise Nyi;
  end parking_system_startGateClosingOut;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Status : in out parking_system_startGateClosingOut_Status;
    Spg_Interface : parking_system_startGateClosingOut_Interface)
  is
  begin
    case Spg_Interface.Port is
      when close_gate_out =>
        Status.close_gate_out :=
         True;

    end case;
  end Put_Value;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Status : parking_system_startGateClosingOut_Status;
    Port : parking_system_startGateClosingOut_Port_Type)
   return parking_system_startGateClosingOut_Interface
  is
  begin
    case Port is
      when close_gate_out =>
        return (Port => close_gate_out);

    end case;
  end Get_Value;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Status : in out parking_system_startGateClosingOut_Status;
    Port : parking_system_startGateClosingOut_Port_Type)
  is
    pragma Unreferenced
     (Status,
      Port);
  begin
    --  Not implemented yet!
    raise Program_Error;
  end Next_Value;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Status : parking_system_startGateClosingOut_Status;
    Port : parking_system_startGateClosingOut_Port_Type)
   return Standard.Integer
  is
  begin
    case Port is
      when close_gate_out =>
        if Status.close_gate_out
        then
          return 1;
        else
          return 0;
        end if;

    end case;
  end Get_Count;

end PolyORB_HI_Generated.Subprograms;
